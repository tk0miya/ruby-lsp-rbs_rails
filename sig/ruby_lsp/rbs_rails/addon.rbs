# Generated from lib/ruby_lsp/rbs_rails/addon.rb with RBS::Inline

module RubyLsp
  module RbsRails
    class Addon < ::RubyLsp::Addon
      include LanguageServer::Protocol::Constant

      attr_reader global_state: GlobalState

      attr_reader logger: Logger

      # @rbs global_state: GlobalState
      # @rbs message_queue: Thread::Queue
      def activate: (GlobalState global_state, Thread::Queue message_queue) -> void

      def deactivate: () -> void

      def name: () -> String

      def version: () -> String

      type fileChangeTypes = FileChangeType::CREATED | FileChangeType::CHANGED | FileChangeType::DELETED

      # @rbs changes: Array[{ uri: String, type: fileChangeTypes }]
      def workspace_did_change_watched_files: (Array[{ uri: String, type: fileChangeTypes }] changes) -> void

      private

      @workspace_path: Pathname?

      def workspace_path: () -> Pathname

      # Load Rails application and enable reloading
      def load_application: () -> void

      def install_hooks: () -> void

      def load_rbs_rails_config: () -> void

      def config: () -> ::RbsRails::CLI::Configuration

      # @rbs uri: String
      def generate_signature: (String uri) -> void

      def generate_all_model_signatures: () -> void

      def generate_path_helpers_signature: () -> void

      # @rbs klass: Class
      def generate_signature0: (Class klass) -> void

      # @rbs uri: String
      def delete_signature: (String uri) -> void

      # @rbs uri: String
      def uri_to_path: (String uri) -> Pathname?

      # @rbs path: Pathname
      def constantize: (Pathname path) -> Class?

      # @rbs klass: Class
      def get_rbs_path_for_model: (Class klass) -> Pathname
    end
  end
end
